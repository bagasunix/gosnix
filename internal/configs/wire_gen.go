// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package configs

import (
	"context"
	"github.com/bagasunix/gosnix/pkg/configs"
	"github.com/gofiber/fiber/v2"
	"github.com/google/wire"
	"github.com/phuslu/log"
	"github.com/rabbitmq/amqp091-go"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

import (
	_ "github.com/golang-migrate/migrate/v4/source/file"
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeConfigs(ctx context.Context) *Configs {
	cfg := configs.InitConfig(ctx)
	logger := InitLogger(cfg)
	db := InitDB(ctx, cfg, logger)
	client := InitRedis(ctx, logger, cfg)
	connection := InitRabbitMQ(ctx, cfg, logger)
	app := InitFiber(ctx, cfg, client, logger)
	configsConfigs := &Configs{
		Cfg:         cfg,
		DB:          db,
		RedisClient: client,
		RabbitConn:  connection,
		Logger:      logger,
		FiberApp:    app,
	}
	return configsConfigs
}

// wire.go:

// Container untuk semua configs
type Configs struct {
	Cfg         *configs.Cfg
	DB          *gorm.DB
	RedisClient *redis.Client
	RabbitConn  *amqp091.Connection
	Logger      *log.Logger
	FiberApp    *fiber.App
}

var ConfigSet = wire.NewSet(configs.InitConfig, InitLogger,
	InitDB,
	InitRedis,
	InitRabbitMQ,
	InitFiber, wire.Struct(new(Configs), "*"),
)
